<?xml version="1.0" encoding="utf-8"?>

<!-- 
Copyright (c) 2011, PIA. All rights reserved.

This file is part of Eskimo.

Eskimo is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Eskimo is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with Eskimo.  If not, see <http://www.gnu.org/licenses/>.
-->

<!---
The iOS skin class for the Eskimo ConfirmButton component.
@see com.pialabs.eskimo.components.ConfirmButton
-->
<s:Skin xmlns:fx="http://ns.adobe.com/mxml/2009"
        xmlns:s="library://ns.adobe.com/flex/spark"
        clipAndEnableScrolling="true">
  <!-- host component -->
  <fx:Metadata>
    /** 
    * @copy spark.skins.spark.ApplicationSkin#hostComponent
    */
    [HostComponent("com.pialabs.eskimo.components.ConfirmButton")]
  </fx:Metadata>

  <!-- SkinParts
  name=button, type=spark.components.Button, required=true
  name=cancelButton, type=spark.components.Button, required=true
  name=confirmButton, type=spark.components.Button, required=true
  -->
  <fx:Script>
    <![CDATA[
      /**
      * @private
      */
      override protected function measure():void
      {
        super.measure();
        
        measuredHeight = button.getPreferredBoundsHeight();
      }
      
      /**
       * @private
       */
      override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void
      {
        super.updateDisplayList(unscaledWidth, unscaledHeight);
        
        if (confirmationGroup)
        {
          confirmationGroup.width = unscaledWidth;
          confirmationGroup.height = unscaledHeight;
        }
      
      }
    ]]>
  </fx:Script>

  <s:states>
    <s:State name="normal"/>
    <s:State name="confirmation"/>
  </s:states>

  <s:Group width="100%" height="100%">
    <s:layout>
      <s:VerticalLayout horizontalAlign="right" paddingBottom="2"
                        paddingRight="1" paddingLeft="1"/>
    </s:layout>
    <s:Button id="button" includeIn="normal" height="100%"/>
  </s:Group>

  <!--- confirmation group -->
  <s:HGroup id="confirmationGroup" includeIn="confirmation" paddingBottom="2"
            paddingRight="1" paddingLeft="1">
    <!--- validation button -->
    <s:Button id="confirmButton" width="100%" height="100%"/>
    <!--- cancel button -->
    <s:Button id="cancelButton" width="100%" height="100%"/>
  </s:HGroup>

  <!--- transitions -->
  <s:transitions>
    <s:Transition fromState="*" toState="confirmation">
      <s:Parallel id="confirmationEff">
        <s:Move target="{confirmationGroup}" yFrom="{this.height}" yTo="0"
                duration="300"/>
        <s:Fade target="{button}" alphaFrom="1" alphaTo="0" duration="150"/>
        <s:RemoveAction target="{button}" startDelay="300"/>
      </s:Parallel>
    </s:Transition>
    <s:Transition fromState="*" toState="normal">
      <s:Parallel id="cancelEff">
        <s:Move target="{confirmationGroup}" yFrom="0" yTo="{this.height}"
                duration="300"/>
        <s:Fade target="{button}" alphaFrom="0" alphaTo="1" duration="300"/>
        <s:RemoveAction target="{confirmationGroup}" startDelay="300"/>
      </s:Parallel>
    </s:Transition>
  </s:transitions>
</s:Skin>
