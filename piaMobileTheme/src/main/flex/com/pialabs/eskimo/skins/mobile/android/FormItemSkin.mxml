<?xml version="1.0" encoding="utf-8"?>
<!--

ADOBE SYSTEMS INCORPORATED
Copyright 2010 Adobe Systems Incorporated
All Rights Reserved.

NOTICE: Adobe permits you to use, modify, and distribute this file
in accordance with the terms of the license agreement accompanying it.

-->

<!-- TODO
Move the indicator tooltip string to a resource bundle
-->

<!--- The android skin class for the Spark FormItem component.

@see spark.components.FormItem

-->
<s:Skin xmlns:fx="http://ns.adobe.com/mxml/2009"
        xmlns:s="library://ns.adobe.com/flex/spark"
        xmlns:fb="http://ns.adobe.com/flashbuilder/2009"
        alpha.disabledStates=".5">

  <!-- host component -->
  <fx:Metadata>
    <![CDATA[ 
        /** 
        * @copy spark.skins.spark.ApplicationSkin#hostComponent
        */
        [HostComponent("spark.components.FormItem")]
        ]]>
  </fx:Metadata>

  <fx:Script fb:purpose="styling">
    <![CDATA[
      /**
       *  @private
       */
      override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void
      {
        // Push backgroundColor and backgroundAlpha directly.
        // Handle undefined backgroundColor by hiding the background object.
        if (isNaN(getStyle("backgroundColor")))
        {
          background.visible = false;
        }
        else
        {
          background.visible = true;
          bgFill.color = getStyle("backgroundColor");
          bgFill.alpha = getStyle("backgroundAlpha");
        }
        
        var indicatorSource:Object;
        if (currentState == "error" || currentState == "requiredAndError")
        {
          indicatorSource = getStyle("errorIndicatorSource");
        }
        else if (currentState == "required" || "requiredAndDisabled")
        {
          indicatorSource = getStyle("requiredIndicatorSource");
        }
        
        if (indicatorSource && indicatorDisplay)
        {
          indicatorDisplay.source = indicatorSource;
        }
        
        if (sequenceLabelDisplay.text == "")
        {
          sequenceLabelDisplay.visible = sequenceLabelDisplay.includeInLayout = false;
        }
        else
        {
          sequenceLabelDisplay.visible = sequenceLabelDisplay.includeInLayout = true;
        }
        
        if (helpContentGroup.numElements < 0)
        {
          helpContentGroup.visible = helpContentGroup.includeInLayout = false;
        }
        else
        {
          helpContentGroup.visible = helpContentGroup.includeInLayout = true;
        }
        
        
        super.updateDisplayList(unscaledWidth, unscaledHeight);
      }
      
      /**
       *  @private
       */
      override public function setCurrentState(stateName:String, playTransition:Boolean = true):void
      {
        super.setCurrentState(stateName, playTransition);
        invalidateDisplayList();
      }
      
      /**
       *  @private
       */
      override protected function measure():void
      {
        super.measure();
      
      }
    ]]>
  </fx:Script>

  <s:states>
    <s:State name="normal"/>
    <s:State name="disabled" stateGroups="disabledStates"/>
    <s:State name="error" stateGroups="errorStates"/>
    <s:State name="required" stateGroups="requiredStates"/>
    <s:State name="requiredAndDisabled"
             stateGroups="requiredStates, disabledStates"/>
    <s:State name="requiredAndError" stateGroups="requiredStates, errorStates"/>
  </s:states>

  <s:layout>
    <s:VerticalLayout horizontalAlign="justify"/>
  </s:layout>

  <!--- Defines the appearance of the FormItem's background. -->
  <s:Rect id="background" left="0" right="0" top="0" bottom="0">
    <s:fill>
      <!--- @private -->
      <s:SolidColor id="bgFill" color="#FFFFFF"/>
    </s:fill>
  </s:Rect>

  <!--- @copy spark.components.FormItem#sequenceLabelDisplay -->
  <s:HGroup left="0" right="0" bottom="0">
    <s:Label id="sequenceLabelDisplay" height="100%" baseline="0"/>
    <!--- @copy spark.components.FormItem#labelDisplay -->
    <s:Label id="labelDisplay" height="100%" baseline="0"/>
    <!--- @copy spark.components.FormItem#helpContentGroup -->
    <s:Group id="helpContentGroup" excludeFrom="errorStates" fontStyle="italic"
             fontWeight="normal" color="0x666666" width="100%" height="100%"
             baseline="0"/>
    <!--- @copy spark.components.FormItem#errorTextDisplay -->
    <s:RichText id="errorTextDisplay" includeIn="errorStates" fontStyle="italic"
                fontWeight="normal" color="0xFE0000" width="100%" height="100%"
                baseline="0" maxDisplayedLines="-1"/>
  </s:HGroup>
  <!--- @copy spark.components.SkinnableContainer#contentGroup -->
  <!-- Don't show the error tip on the content elements -->
  <s:Group id="contentGroup" showErrorTip="false" showErrorSkin="true" left="0"
           right="0" baseline="0" bottom="0">
    <s:layout>
      <s:VerticalLayout horizontalAlign="justify"/>
    </s:layout>
  </s:Group>
  <!-- Don't include the indicator in layout since we position it ourselves -->
  <s:Group x="{contentGroup.x + contentGroup.contentWidth + 4}"
           y="{contentGroup.y}"
           height="{Math.max(indicatorDisplay.height, contentGroup.contentHeight)}"
           includeInLayout="false">
    <!--- @private -->
    <s:Image id="indicatorDisplay" verticalCenter="0" toolTip="Required"
             toolTip.errorStates="" includeIn="requiredStates,errorStates"/>
  </s:Group>


</s:Skin>
