<?xml version="1.0" encoding="utf-8"?>

<!-- 
Copyright (c) 2011, PIA. All rights reserved.

This file is part of Eskimo.

Eskimo is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Eskimo is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with Eskimo.  If not, see <http://www.gnu.org/licenses/>.
-->

<!---
The iOS skin class for the Eskimo ActionBar buttons.
@see spark.components.ActionBar
-->
<s:SparkButtonSkin xmlns:fx="http://ns.adobe.com/mxml/2009"
                   xmlns:s="library://ns.adobe.com/flex/spark"
                   xmlns:fb="http://ns.adobe.com/flashbuilder/2009">
  <!-- host component -->
  <fx:Metadata>
    [HostComponent("spark.components.Button")]
    [Style(name="labelDisplayed", inherit="no", type="Boolean")]
  </fx:Metadata>

  <fx:Script fb:purpose="styling">
    <![CDATA[
      import mx.core.UIComponent;
      
      import spark.components.Group;
      /* Define the skin elements that should not be colorized.
      For button, the graphics are colorized but the label is not. */
      static private const exclusions:Array = ["labelDisplay"];
      
      /**
       * @private
       */
      override public function get colorizeExclusions():Array
      {
        return exclusions;
      }
      
      /**
       * @private
       */
      override protected function initializationComplete():void
      {
        useChromeColor = true;
        super.initializationComplete();
      }
      
      /**
       *  @private
       */
      override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void
      {
        var cr:Number = getStyle("cornerRadius");
        
        if (cornerRadius != cr)
        {
          cornerRadius = cr;
          if (fill)
          {
            fill.radiusX = cornerRadius;
          }
          border.radiusX = cornerRadius;
          lightBorder.radiusX = cornerRadius;
          lightBorder.height = cornerRadius * 2;
        }
        
        super.updateDisplayList(unscaledWidth, unscaledHeight);
      }
      
      private var cornerRadius:Number = 2;
    ]]>
  </fx:Script>

  <!-- states -->
  <s:states>
    <s:State name="disabled"/>
    <s:State name="down"/>
    <s:State name="over"/>
    <s:State name="up"/>
  </s:states>

  <!-- SkinParts
  name=iconDisplay, type=spark.primitives.BitmapImage, required=false
  name=labelDisplay, type=spark.core.IDisplayText, required=false
  -->
  <!--- background rectangle -->
  <s:Rect id="fill" left="1" right="1" top="1" bottom="1" radiusX="5"
          excludeFrom="disabled">
    <s:fill>
      <s:LinearGradient rotation="90">
        <s:GradientEntry color="#B1B5BB" ratio="0"/>
        <s:GradientEntry color="#6B737E" ratio="1"/>
      </s:LinearGradient>
    </s:fill>
  </s:Rect>

  <!--- background down -->
  <s:Rect id="down" left="1" right="1" top="1" bottom="2" radiusX="5"
          visible="false" visible.down="true">
    <s:fill>
      <s:SolidColor color="#000000" alpha=".3"/>
    </s:fill>
  </s:Rect>

  <!--- inner shadow -->
  <s:Rect id="innerShadow" left="2" right="2" top="2" bottom="2" radiusX="5">
    <s:stroke>
      <s:SolidColorStroke weight="1" color="0x000000" alpha=".1"/>
    </s:stroke>
  </s:Rect>

  <!--- border stroke -->
  <s:Rect id="border" left="1" right="1" top="1" bottom="1" radiusX="5">
    <s:stroke>
      <s:LinearGradientStroke weight="1" rotation="90">
        <s:GradientEntry color="#4C4E50" ratio="0"/>
        <s:GradientEntry color="#4C4E50" ratio="0" alpha="0.7"/>
      </s:LinearGradientStroke>
    </s:stroke>
  </s:Rect>
  <!--- light border stroke -->
  <s:Rect id="lightBorder" left="0" right="0" bottom="0" radiusX="5">
    <s:stroke>
      <s:LinearGradientStroke rotation="90">
        <s:GradientEntry color="#FFFFFF" alpha="0" ratio="0"/>
        <s:GradientEntry color="#FFFFFF" alpha="0" ratio="0.5"/>
        <s:GradientEntry color="#FFFFFF" alpha="0.8" ratio="1"/>
      </s:LinearGradientStroke>
    </s:stroke>
  </s:Rect>


  <!--- @copy spark.components.supportClasses.ButtonBase#labelDisplay  -->
  <s:Label id="labelDisplay" textAlign="center" maxDisplayedLines="1"
           horizontalCenter="0" verticalCenter="0" verticalAlign="middle"
           fontWeight="normal" paddingLeft="5" paddingRight="5">
    <s:filters>
      <s:DropShadowFilter distance="1" angle="-90" color="#000000" blurY="1"
                          blurX="0" alpha="0.5" excludeFrom="disabled"/>
    </s:filters>
  </s:Label>
</s:SparkButtonSkin>
