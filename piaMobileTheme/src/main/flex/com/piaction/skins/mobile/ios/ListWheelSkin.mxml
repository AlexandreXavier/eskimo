<?xml version="1.0" encoding="utf-8"?>
<!--- The default skin class for a ListWheel component.

@see spark.components.List

@langversion 3.0
@playerversion Flash 10
@playerversion AIR 1.5
@productversion Flex 4
-->
<s:SparkSkin xmlns:fx="http://ns.adobe.com/mxml/2009"
             xmlns:s="library://ns.adobe.com/flex/spark"
             xmlns:fb="http://ns.adobe.com/flashbuilder/2009" minWidth="112"
             alpha.disabled="0.5" blendMode="normal"
             xmlns:combo="com.piaction.timesheet.tablet.presentation.common.combo.*">

    <fx:Metadata>
        <![CDATA[ 
    /** 
    * @copy spark.skins.spark.ApplicationSkin#hostComponent
    */
    [HostComponent("com.piaction.components.ListWheel")]
    ]]>
    </fx:Metadata>

    <fx:Script fb:purpose="styling">
        <![CDATA[
            import mx.core.FlexVersion;
            
            /* Define the skin elements that should not be colorized.
            For list, the skin itself is colorized but the individual parts are not. */
            static private const exclusions:Array = ["scroller", "background", "border"];
            
            /* exclusions before Flex 4.5 for backwards-compatibility purposes */
            static private const exclusions_4_0:Array = ["scroller", "background"];
            
            /**
             * @private
             */
            override public function get colorizeExclusions():Array
            {
                // Since border is styleable via borderColor, no need to allow chromeColor to affect
                // the border.  This is wrapped in a compatibility flag since this change was added  
                // in Flex 4.5
                if (FlexVersion.compatibilityVersion < FlexVersion.VERSION_4_5)
                {
                    return exclusions_4_0;
                }
                
                return exclusions;
            }
            
            /* Define the content fill items that should be colored by the "contentBackgroundColor" style. */
            static private const contentFill:Array = ["bgFill"];
            
            /**
             * @private
             */
            override public function get contentItems():Array
            {
                return contentFill
            }
            ;
            
            /**
             * @private
             */
            override protected function initializationComplete():void
            {
                useChromeColor = true;
                super.initializationComplete();
            }
            
            /**
             * @private
             */
            override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void
            {
                if (getStyle("borderVisible") == true)
                {
                    border.visible = true;
                    background.left = background.top = background.right = background.bottom = 1;
                    scroller.minViewportInset = 1;
                }
                else
                {
                    border.visible = false;
                    background.left = background.top = background.right = background.bottom = 0;
                    scroller.minViewportInset = 0;
                }
                
                borderStroke.color = getStyle("borderColor");
                borderStroke.alpha = getStyle("borderAlpha");
                
                super.updateDisplayList(unscaledWidth, unscaledHeight);
            }
        ]]>
    </fx:Script>

    <s:states>
        <s:State name="normal"/>
        <s:State name="disabled"/>
    </s:states>

    <fx:Declarations>
        <!---
        Defines the appearance of the the List's drop indicator.
        To customize the drop indicator appearance, create a custom ListSkin class.
        The List's layout takes care to size and position the dropIndicator.
        The size of the <code>dropIndicator</code> is typically set to the size of the gaps between the items.
        The minimum and maximum settings are typically respected only in the direction
        along the major axis (the gap axis).  For example a VerticalLayout ignores the
        <code>minWidth</code> and <code>maxWidth</code> settings,
        but respect <code>minHeight</code> and <code>maxHeight</code>.

        @copy spark.components.List#dropIndicator
        -->
        <fx:Component id="dropIndicator">
            <s:Group minWidth="3" minHeight="3" maxWidth="3" maxHeight="3">
                <s:Rect left="0" right="0" top="0" bottom="0">
                    <s:fill>
                        <!--- Defines the color of the background. -->
                        <s:SolidColor color="0xBBBBBB"/>
                    </s:fill>
                    <s:stroke>
                        <s:SolidColorStroke color="0x868686" weight="1"/>
                    </s:stroke>
                </s:Rect>
            </s:Group>
        </fx:Component>
    </fx:Declarations>

    <!-- border -->
    <!--- @private -->
    <s:Rect left="3" right="3" top="0" bottom="0" id="border">
        <s:stroke>
            <!--- @private -->
            <s:SolidColorStroke id="borderStroke" weight="1"/>
        </s:stroke>
    </s:Rect>

    <!-- fill -->
    <!--- Defines the background appearance of the list-based component. -->
    <s:Rect id="background" left="4" right="4" top="1" bottom="1">
        <s:fill>
            <!--- Defines the color of the background. The default color is 0xFFFFFF. -->
            <s:SolidColor id="bgFill" color="0xFFFFFF"/>
        </s:fill>
    </s:Rect>

    <!--- The Scroller component to add scroll bars to the list. -->
    <s:Scroller left="3" top="0" right="3" bottom="0" id="scroller"
                minViewportInset="1" hasFocusableChildren="false"
                horizontalScrollPolicy="off">
        <!--- @copy spark.components.SkinnableDataContainer#dataGroup -->
        <s:DataGroup id="dataGroup"
                     itemRenderer="com.piaction.components.ListWheelItemRenderer">
            <s:layout>
                <!--- The default layout is vertical and measures at least for 5 rows.
                When switching to a different layout, HorizontalLayout for example,
                make sure to adjust the minWidth, minHeihgt sizes of the skin -->
                <s:VerticalLayout gap="0" horizontalAlign="contentJustify"/>
            </s:layout>
        </s:DataGroup>
    </s:Scroller>

    <!-- fill -->
    <!--- Defines the rounded gradient component. -->
    <s:Rect id="shadow" left="3" right="3" top="0" bottom="0">
        <s:fill>
            <!--- Defines the color of the background. The default color is 0xFFFFFF. -->
            <s:LinearGradient rotation="90">
                <s:GradientEntry ratio="0" color="#2F3338"
                                 alpha="{1-Math.sin(Math.PI*0)}"/>
                <s:GradientEntry ratio="0.10" color="#2F3338"
                                 alpha="{1-Math.sin(Math.PI*0.10)}"/>
                <s:GradientEntry ratio="0.30" color="#2F3338"
                                 alpha="{1-Math.sin(Math.PI*0.30)}"/>
                <s:GradientEntry ratio="0.40" color="#2F3338"
                                 alpha="{1-Math.sin(Math.PI*0.40)}"/>
                <s:GradientEntry ratio="0.60" color="#2F3338"
                                 alpha="{1-Math.sin(Math.PI*0.60)}"/>
                <s:GradientEntry ratio="0.70" color="#2F3338"
                                 alpha="{1-Math.sin(Math.PI*0.70)}"/>
                <s:GradientEntry ratio="0.90" color="#2F3338"
                                 alpha="{1-Math.sin(Math.PI*0.90)}"/>
                <s:GradientEntry ratio="1" color="#2F3338"
                                 alpha="{1-Math.sin(-Math.PI*1)}"/>
            </s:LinearGradient>
        </s:fill>
    </s:Rect>
    <!--- right path -->
    <s:Path right="0" data="{('M 0 0 L 3 3 V '+ (height-3) +' L 0 '+ height)}"
            width="3">
        <s:fill>
            <s:LinearGradient rotation="90">

                <s:GradientEntry ratio="0" color="#1F1E27"/>
                <s:GradientEntry ratio="0.3" color="#C8CADB"/>
                <s:GradientEntry ratio="0.7" color="#C8CADB"/>
                <s:GradientEntry ratio="1" color="#1F1E27"/>
            </s:LinearGradient>
        </s:fill>
    </s:Path>
    <!--- left path -->
    <s:Path left="0" data="{('M 3 0 L 0 3 V '+ (height-3) +' L 3 '+ height)}"
            width="3">
        <s:fill>
            <s:LinearGradient rotation="90">

                <s:GradientEntry ratio="0" color="#1F1E27"/>
                <s:GradientEntry ratio="0.3" color="#C8CADB"/>
                <s:GradientEntry ratio="0.7" color="#C8CADB"/>
                <s:GradientEntry ratio="1" color="#1F1E27"/>
            </s:LinearGradient>
        </s:fill>
    </s:Path>
    <!--- selection rectangle -->
    <s:Rect id="selection" left="0" right="0" height="{hostComponent.rowHeight}"
            verticalCenter="0">
        <s:fill>
            <s:LinearGradient rotation="90">
                <s:GradientEntry color="{getStyle('gradientColorBegin')}" alpha="0.3" ratio="0"/>
                <s:GradientEntry color="{getStyle('gradientColorBegin')}" alpha="0.3" ratio="0.5"/>
                <s:GradientEntry color="{getStyle('gradientColorEnd')}" alpha="0.3" ratio="0.5"/>
                <s:GradientEntry color="{getStyle('gradientColorEnd')}" alpha="0.3" ratio="1"/>
            </s:LinearGradient>
        </s:fill>
    </s:Rect>
    <!--- selection rectangle top stroke -->
    <s:Line verticalCenter="{-hostComponent.rowHeight/2}" left="0" right="0">
        <s:stroke>
            <s:SolidColorStroke color="#8A8BA0"/>
        </s:stroke>
    </s:Line>
    <!--- selection rectangle bottom stroke -->
    <s:Line verticalCenter="{hostComponent.rowHeight/2}" left="0" right="0">
        <s:stroke>
            <s:SolidColorStroke color="#8A8BA0"/>
        </s:stroke>
    </s:Line>
</s:SparkSkin>
