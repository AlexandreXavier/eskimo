<?xml version="1.0" encoding="utf-8"?>

<!--

ADOBE SYSTEMS INCORPORATED
Copyright 2008 Adobe Systems Incorporated
All Rights Reserved.

NOTICE: Adobe permits you to use, modify, and distribute this file
in accordance with the terms of the license agreement accompanying it.

-->

<!--- The default skin class for a Spark SkinnableContainer container.  

@see spark.components.SkinnableContainer

@langversion 3.0
@playerversion Flash 10
@playerversion AIR 1.5
@productversion Flex 4
-->

<s:Skin xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark" 
        xmlns:fb="http://ns.adobe.com/flashbuilder/2009" alpha.disabled="0.5"
        minWidth="200" minHeight="100" initialize="onInitialize(event)">
  
  <fx:Metadata>
    <![CDATA[ 
    /** 
    * @copy spark.skins.spark.ApplicationSkin#hostComponent
    */
    [HostComponent("com.piaction.components.PopOver")]
    ]]>
  </fx:Metadata> 
  
  <fx:Declarations>
  </fx:Declarations>
  
  <fx:Script fb:purpose="styling">
    <![CDATA[         
      import com.piaction.components.PopOver;
      
      import mx.core.DPIClassification;
      import mx.core.FlexGlobals;
      import mx.events.FlexEvent;
      /**
       *  @private
       */
      override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number) : void
      {
        // Push backgroundColor and backgroundAlpha directly.
        
        var radius:int = 10;
        
        super.updateDisplayList(unscaledWidth, unscaledHeight);
        
        if(topArrow){ 
          topArrow.x = (unscaledWidth - topArrow.width)/2 + hostComponent.targetCenterOffset;
          topArrow.x = Math.max(topArrow.x, contentGroup.x + radius);
          topArrow.x = Math.min(topArrow.x, contentGroup.x + contentGroup.width - topArrow.width - radius);
        }
        if(downArrow){ 
          downArrow.x = (unscaledWidth - downArrow.width)/2 + hostComponent.targetCenterOffset;
          downArrow.x = Math.max(downArrow.x, contentGroup.x + radius);
          downArrow.x = Math.min(downArrow.x, contentGroup.x + contentGroup.width - downArrow.width - radius);
        }
        if(leftArrow){ 
          leftArrow.y = (unscaledHeight - leftArrow.height)/2 + hostComponent.targetCenterOffset;
          leftArrow.y = Math.max(leftArrow.y, contentGroup.x + radius);
          leftArrow.y = Math.min(leftArrow.y, contentGroup.y + contentGroup.height  - leftArrow.height - radius);
        }
        if(rightArrow){ 
          rightArrow.y = (unscaledHeight - rightArrow.height)/2 + hostComponent.targetCenterOffset;
          rightArrow.y = Math.max(rightArrow.y, contentGroup.x + radius);
          rightArrow.y = Math.min(rightArrow.y, contentGroup.y + contentGroup.height  - rightArrow.height - radius);
        }
      }
      
      [Bindable]
      private var topArrowPathData:String;
      [Bindable]
      private var downArrowPathData:String;
      [Bindable]
      private var leftArrowPathData:String;
      [Bindable]
      private var rightArrowPathData:String;
      
      protected function onInitialize(event:FlexEvent):void
      {
        switch(applicationDPI)
        {
          case DPIClassification.DPI_160:
          {
            background.top = 9;
            background.right = 9;
            background.bottom = 9;
            background.left = 9;
            
            contentGroup.top = 9;
            contentGroup.right = 9;
            contentGroup.bottom = 9;
            contentGroup.left = 9;
            
            
            topArrowPathData = "M 0 10 L 11 0 L 22 10";
            downArrowPathData = "M 0 -10 L 11 0 L 22 -10";
            leftArrowPathData = "M 10 0 L 0 11 L 10 22";
            rightArrowPathData = "M 0 0 L 16 11 L 0 22";
            break;
          }
          case DPIClassification.DPI_240:
          {
            background.top = 15;
            background.right = 15;
            background.bottom = 15;
            background.left = 15;
            
            contentGroup.top = 15;
            contentGroup.right = 15;
            contentGroup.bottom = 15;
            contentGroup.left = 15;
            
            
            topArrowPathData = "M 0 16 L 17 0 L 34 16";
            downArrowPathData = "M 0 -16 L 17 0 L 34 -16";
            leftArrowPathData = "M 16 0 L 0 17 L 16 34";
            rightArrowPathData = "M 0 0 L 16 17 L 0 34";
            break;
          }
          case DPIClassification.DPI_320:
          {
            background.top = 21;
            background.right = 21;
            background.bottom = 21;
            background.left = 21;
            
            contentGroup.top = 21;
            contentGroup.right = 21;
            contentGroup.bottom = 21;
            contentGroup.left = 21;
            
            
            topArrowPathData = "M 0 22 L 23 0 L 46 22";
            downArrowPathData = "M 0 -22 L 23 0 L 46 -22";
            leftArrowPathData = "M 22 0 L 0 23 L 22 46";
            rightArrowPathData = "M 0 0 L 16 23 L 0 46";
            break;
          }
            
        }
      }
      
      protected function get applicationDPI():Number
      {
        return FlexGlobals.topLevelApplication.applicationDPI;
      }
    ]]>        
  </fx:Script>
  
  <s:states>
    <s:State name="normal" />
    <s:State name="disabled" />
    <s:State name="closed" />
    <s:State name="topPosition" enterState="invalidateDisplayList()"/>
    <s:State name="bottomPosition" enterState="invalidateDisplayList()" />
    <s:State name="rightPosition" enterState="invalidateDisplayList()" />
    <s:State name="leftPosition" enterState="invalidateDisplayList()" />
  </s:states>
  
  <!--- Defines the appearance of the SkinnableContainer class's background. -->
  
  <s:Group top="0" right="0" bottom="0" left="0">
    
    <s:Rect id="background" radiusX="10" radiusY="10" left="15" right="15" top="15" bottom="15">
      <s:stroke>
        <s:SolidColorStroke color="0x000000"/>
      </s:stroke>  
      <s:fill>
        <!--- @private -->
        <s:SolidColor id="bgFill" color="#10142E"/>
      </s:fill>
    </s:Rect>
    
    <s:Rect id="whiteHalo" left="16" right="16" top="16" height="12" topRightRadiusX="10" topLeftRadiusX="10">
      <s:fill>
        <s:LinearGradient rotation="90">
          <s:GradientEntry color="#FFFFFF" ratio="0" alpha="0.5"/>
          <s:GradientEntry color="#FFFFFF" ratio="1" alpha="0"/>
        </s:LinearGradient>
      </s:fill>
    </s:Rect>
    
    <s:Group id="topArrow"   top="0" includeIn="bottomPosition"
             mask="{topArrowMask}">
      
      <s:Path id="topArrowPath" data="{topArrowPathData}">
        <s:stroke>
          <s:SolidColorStroke color="0x000000"/>
        </s:stroke> 
        <s:fill>
          <s:SolidColor color="#10142E" alpha="0.95"/>
        </s:fill>
      </s:Path>
      <s:Path id="topArrowGlowPath" data="{topArrowPathData}" top="0.5">
        <s:fill>
          <s:SolidColor color="#FFFFFF" alpha="0.5"/>
        </s:fill>
      </s:Path>
    </s:Group>
    
    <s:Group id="topArrowMask" left="0" right="0">
      
      <s:Rect id="topArrowMaskPath" right="0" left="0" height="{topArrow.height - 1}">
        <s:fill>
          <s:SolidColor/>
        </s:fill>
      </s:Rect>
    </s:Group>
    
    <s:Path id="downArrow" data="{downArrowPathData}" bottom="0" includeIn="topPosition">
      <s:stroke>
        <s:SolidColorStroke color="0x000000"/>
      </s:stroke> 
      <s:fill>
        <s:SolidColor color="#10142E"/>
      </s:fill>
    </s:Path>
    
    <s:Path id="leftArrow" data="{leftArrowPathData}"  left="0" includeIn="rightPosition">
      <s:stroke>
        <s:SolidColorStroke color="0x000000"/>
      </s:stroke> 
      <s:fill>
        <s:SolidColor color="#10142E"/>
      </s:fill>
    </s:Path>
    
    <s:Path id="rightArrow" data="{rightArrowPathData}" right="0" includeIn="leftPosition">
      <s:stroke>
        <s:SolidColorStroke color="0x000000"/>
      </s:stroke> 
      <s:fill>
        <s:SolidColor color="#10142E"/>
      </s:fill>
    </s:Path>
    
  <s:filters>
  <s:DropShadowFilter angle="90" color="#FFFFFF" alpha="0.5" inner="true" blurY="2" blurX="2" distance="1"/>
  </s:filters>
  </s:Group>
  
  
  
  
  <!--
  Note: setting the minimum size to 0 here so that changes to the host component's
  size will not be thwarted by this skin part's minimum size.   This is a compromise,
  more about it here: http://bugs.adobe.com/jira/browse/SDK-21143
  -->
  <!--- @copy spark.components.SkinnableContainer#contentGroup -->
  <s:Group id="contentGroup" left="15" right="15" top="15" bottom="15" minWidth="0" minHeight="0">
    <s:layout>
      <s:BasicLayout/>
    </s:layout>
  </s:Group>
  
</s:Skin>
